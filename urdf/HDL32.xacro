<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:property name="M_PI" value="3.1415926535897931" />
  
  <xacro:macro name="HDL32E_macro" params="suffix parent namespace x y z roll pitch yaw">
  
  <xacro:property name="hz" value="10" />
  <xacro:property name="laser" value="32" />
  <xacro:property name="samples" value="2187" />
  <xacro:property name="collision_range" value="0.3" />
  <xacro:property name="min_range" value="0.9" />
  <xacro:property name="max_range" value="130.0" />
  <xacro:property name="noise" value="0.008" />
  <xacro:property name="min_angle" value="-${M_PI}" />
  <xacro:property name="max_angle" value="-${M_PI}" />
  <xacro:property name="gpu" value="false" />
  

    <joint name="${suffix}_base_mount_joint" type="fixed">
      <origin rpy="${roll} ${pitch} ${yaw}" xyz="${x} ${y} ${z}"/>
      <parent link="${parent}"/>
      <child link="${suffix}_base_link"/>
    </joint>

    <link name="${suffix}_base_link">
      <inertial>
        <mass value="1.0"/>
       <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="${(1.0 * (3.0*0.04267*0.04267 + 0.14424*0.14424)) / 12.0}" 
        	ixy="0" 
        	ixz="0"
        	iyy="${(1.0 * (3.0*0.04267*0.04267 + 0.14424*0.14424)) / 12.0}"
        	iyz="0"
        	izz="${0.5 * 1.0 * (0.04267*0.04267)}"/>
      </inertial>
      
      <visual>
      	<origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://self-driving-car/mesh/HDL32E_base.dae" />
        </geometry>
        <gazebo reference="${suffix}_link">
  		<material value="Gazebo/Orange"/>
	</gazebo>
      </visual>
      
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <cylinder radius="0.04267" length="0.14424"/>
        </geometry>
      </collision>
      
    </link>

    <joint name="${suffix}_base_scan_joint" type="fixed" >
      <origin rpy="${roll} ${pitch} ${yaw}" xyz="${x} ${y} ${z}"/>
      <parent link="${suffix}_base_link" />
      <child link="${suffix}"/>
    </joint>

    <link name="${suffix}">
      <inertial>
        <mass value="0.01"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
      </inertial>
      
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="package://self-driving-car/mesh/HDL32E_scan.dae" />
        </geometry>
         <gazebo reference="${suffix}_link">
  		<material value="Gazebo/Orange"/>
	</gazebo>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <cylinder radius="0.04267" length="0.14424"/>
        </geometry>
      </collision>
    </link>

    <!-- Gazebo requires the velodyne_gazebo_plugins package -->
    <gazebo reference="${suffix}">
      <sensor type="ray" name="${suffix}-sensor">
          <pose>0 0 0 0 0 0</pose>
          <visualize>false</visualize>
          <update_rate>${hz}</update_rate>
          <ray>
            <scan>
              <horizontal>
                <samples>${samples}</samples>
                <resolution>1</resolution>
                <min_angle>${min_angle}</min_angle>
                <max_angle>${max_angle}</max_angle>
              </horizontal>
              <vertical>
                <samples>${lasers}</samples>
                <resolution>1</resolution>
                <min_angle>-${30.67*M_PI/180.0}</min_angle>
                <max_angle> ${10.67*M_PI/180.0}</max_angle>
              </vertical>
            </scan>
            <range>
              <min>${collision_range}</min>
              <max>${max_range+1}</max>
              <resolution>0.001</resolution>
            </range>
            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.0</stddev>
            </noise>
          </ray>
          <plugin name="gazebo_ros_laser_controller" filename="libvelocity_controllers.so">
            <topicName>${topic}</topicName>
            <frameName>${suffix}</frameName>
            <min_range>${min_range}</min_range>
            <max_range>${max_range}</max_range>
            <gaussianNoise>${noise}</gaussianNoise>
          </plugin>
        </sensor>
    </gazebo>

  </xacro:macro>
</robot>
